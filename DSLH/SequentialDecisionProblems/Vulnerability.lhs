> {-# LANGUAGE NoMonomorphismRestriction #-}

Formalisation based on Ionescu [2008] and
Daniel Lincke, Patrik Jansson, Marcin Zalewski and Cezar Ionescu PIK, Chalmers
Generic Libraries in C++ with Concepts from High-Level Domain Descriptions in Haskell

  "Vulnerability is about possible future harm"

Vulnerability is about a possible future of a system, usually with a finite horizon

< model     :: (Functor f) => state -> f state
< possible  :: (Functor f) => state -> f evolution

|f| determines the type of the model
|harm| is a measure on evolutions

< harm :: evolution -> v

A measure is used to collapse harm values

< measure :: (Functor f) => f v -> w

Then vulnerability is possible harm:

< vulnerability :: state -> w
< vulnerability = measure . fmap harm . possible

A more flexible version takes it parts (possible, harm and measure) as higher-order inputs

> vulnerability :: (Functor f)
>   => (f v -> w)                   -- Measure
>   -> (evolution -> v)             -- Harm
>   -> (state -> f evolution)       -- Possible
>   -> state -> w
> vulnerability meas harm poss = meas . fmap harm . poss
